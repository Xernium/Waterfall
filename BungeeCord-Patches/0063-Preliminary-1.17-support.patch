From 35fec4e487928ab0f19e2f6f695a3a563c33f169 Mon Sep 17 00:00:00 2001
From: "Markus L. (FivePB)" <admin@fivepb.me>
Date: Mon, 9 Nov 2020 09:47:50 +0100
Subject: [PATCH] Preliminary 1.17 support


diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java b/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java
index 252389bd..35f22e09 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java
@@ -35,7 +35,7 @@ import net.md_5.bungee.protocol.packet.StatusResponse;
 import net.md_5.bungee.protocol.packet.TabCompleteRequest;
 import net.md_5.bungee.protocol.packet.TabCompleteResponse;
 import net.md_5.bungee.protocol.packet.Team;
-import net.md_5.bungee.protocol.packet.Title;
+import net.md_5.bungee.protocol.packet.title.Title;
 import net.md_5.bungee.protocol.packet.ViewDistance;
 
 public abstract class AbstractPacketHandler
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java b/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
index 0dffc8d2..7ad8ce25 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
@@ -41,8 +41,8 @@ import net.md_5.bungee.protocol.packet.StatusResponse;
 import net.md_5.bungee.protocol.packet.TabCompleteRequest;
 import net.md_5.bungee.protocol.packet.TabCompleteResponse;
 import net.md_5.bungee.protocol.packet.Team;
-import net.md_5.bungee.protocol.packet.Title;
 import net.md_5.bungee.protocol.packet.ViewDistance;
+import net.md_5.bungee.protocol.packet.title.*;
 
 public enum Protocol
 {
@@ -73,7 +73,8 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_14, 0x20 ),
                     map( ProtocolConstants.MINECRAFT_1_15, 0x21 ),
                     map( ProtocolConstants.MINECRAFT_1_16, 0x20 ),
-                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x1F )
+                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x1F ),
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x21 ) // Waterfall 21w10a 0x1F -> 0x21
             );
             TO_CLIENT.registerPacket(
                     Login.class,
@@ -83,7 +84,8 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_13, 0x25 ),
                     map( ProtocolConstants.MINECRAFT_1_15, 0x26 ),
                     map( ProtocolConstants.MINECRAFT_1_16, 0x25 ),
-                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x24 )
+                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x24 ),
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x26 ) // Waterfall 21w10a 0x24 -> 0x26
             );
             TO_CLIENT.registerPacket(
                     Chat.class,
@@ -92,7 +94,8 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_9, 0x0F ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x0E ),
                     map( ProtocolConstants.MINECRAFT_1_15, 0x0F ),
-                    map( ProtocolConstants.MINECRAFT_1_16, 0x0E )
+                    map( ProtocolConstants.MINECRAFT_1_16, 0x0E ),
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x0F ) // Waterfall 20w49a 0x0E -> 0x0F
             );
             TO_CLIENT.registerPacket(
                     Respawn.class,
@@ -105,14 +108,16 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_14, 0x3A ),
                     map( ProtocolConstants.MINECRAFT_1_15, 0x3B ),
                     map( ProtocolConstants.MINECRAFT_1_16, 0x3A ),
-                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x39 )
+                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x39 ),
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x3C ) // Waterfall 21w10a 0x39 -> 0x3C
             );
             TO_CLIENT.registerPacket(
                     BossBar.class,
                     BossBar::new, // Waterfall - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_1_9, 0x0C ),
                     map( ProtocolConstants.MINECRAFT_1_15, 0x0D ),
-                    map( ProtocolConstants.MINECRAFT_1_16, 0x0C )
+                    map( ProtocolConstants.MINECRAFT_1_16, 0x0C ),
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x0D ) // Waterfall 20w49a 0x0C -> 0x0D
             );
             // Waterfall start
             TO_CLIENT.registerPacket(
@@ -138,7 +143,8 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_14, 0x33 ),
                     map( ProtocolConstants.MINECRAFT_1_15, 0x34 ),
                     map( ProtocolConstants.MINECRAFT_1_16, 0x33 ),
-                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x32 )
+                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x32 ),
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x35 ) // Waterfall 21w10a 0x32 -> 0x35
             );
             TO_CLIENT.registerPacket(
                     TabCompleteResponse.class,
@@ -148,7 +154,8 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_13, 0x10 ),
                     map( ProtocolConstants.MINECRAFT_1_15, 0x11 ),
                     map( ProtocolConstants.MINECRAFT_1_16, 0x10 ),
-                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x0F )
+                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x0F ),
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x11 ) // Waterfall 21w08a 0x0F -> 0x11
             );
             TO_CLIENT.registerPacket(
                     ScoreboardObjective.class,
@@ -159,7 +166,8 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_12_1, 0x42 ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x45 ),
                     map( ProtocolConstants.MINECRAFT_1_14, 0x49 ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x4A )
+                    map( ProtocolConstants.MINECRAFT_1_15, 0x4A ),
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x52 ) // Waterfall 21w10a 0x4A -> 0x52
             );
             TO_CLIENT.registerPacket(
                     ScoreboardScore.class,
@@ -170,7 +178,8 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_12_1, 0x45 ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x48 ),
                     map( ProtocolConstants.MINECRAFT_1_14, 0x4C ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x4D )
+                    map( ProtocolConstants.MINECRAFT_1_15, 0x4D ),
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x55 ) // Waterfall 21w10a 0x4D -> 0x55
             );
             TO_CLIENT.registerPacket(
                     ScoreboardDisplay.class,
@@ -181,7 +190,8 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_12_1, 0x3B ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x3E ),
                     map( ProtocolConstants.MINECRAFT_1_14, 0x42 ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x43 )
+                    map( ProtocolConstants.MINECRAFT_1_15, 0x43 ),
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x4B ) // Waterfall 21w10a 0x43 -> 0x4B
             );
             TO_CLIENT.registerPacket(
                     Team.class,
@@ -192,7 +202,8 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_12_1, 0x44 ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x47 ),
                     map( ProtocolConstants.MINECRAFT_1_14, 0x4B ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x4C )
+                    map( ProtocolConstants.MINECRAFT_1_15, 0x4C ),
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x54 ) // Waterfall 21w10a 0x4C -> 0x54
             );
             TO_CLIENT.registerPacket(
                     PluginMessage.class,
@@ -203,7 +214,8 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_14, 0x18 ),
                     map( ProtocolConstants.MINECRAFT_1_15, 0x19 ),
                     map( ProtocolConstants.MINECRAFT_1_16, 0x18 ),
-                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x17 )
+                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x17 ),
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x18 ) // Waterfall 21w10a 0x17 -> 0x18
             );
             TO_CLIENT.registerPacket(
                     Kick.class,
@@ -214,11 +226,14 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_14, 0x1A ),
                     map( ProtocolConstants.MINECRAFT_1_15, 0x1B ),
                     map( ProtocolConstants.MINECRAFT_1_16, 0x1A ),
-                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x19 )
+                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x19 ),
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x1A ) // Waterfall 21w10a 0x19 -> 0x1A
             );
+            // Waterfall start
             TO_CLIENT.registerPacket(
-                    Title.class,
-                    Title::new, // Waterfall - speed up packet construction
+                    GenericTitle.class,
+                    GenericTitle::new, // Waterfall - speed up packet construction
+                    ProtocolConstants.MINECRAFT_1_17,
                     map( ProtocolConstants.MINECRAFT_1_8, 0x45 ),
                     map( ProtocolConstants.MINECRAFT_1_12, 0x47 ),
                     map( ProtocolConstants.MINECRAFT_1_12_1, 0x48 ),
@@ -227,6 +242,32 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_15, 0x50 ),
                     map( ProtocolConstants.MINECRAFT_1_16, 0x4F )
             );
+            TO_CLIENT.registerPacket(
+                    TitleText.class,
+                    TitleText::new, // Waterfall - speed up packet construction
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x58 ) // Waterfall 21w10a 0x58
+            );
+            TO_CLIENT.registerPacket(
+                    TitleSubtitle.class,
+                    TitleSubtitle::new, // Waterfall - speed up packet construction
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x56 ) // Waterfall 21w10a 0x56
+            );
+            TO_CLIENT.registerPacket(
+                    TitleActionBar.class,
+                    TitleActionBar::new, // Waterfall - speed up packet construction
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x40 ) // Waterfall 21w10a 0x40
+            );
+            TO_CLIENT.registerPacket(
+                    TitleTimes.class,
+                    TitleTimes::new, // Waterfall - speed up packet construction
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x59 ) // Waterfall 21w10a 0x59
+            );
+            TO_CLIENT.registerPacket(
+                    TitleClearAndReset.class,
+                    TitleClearAndReset::new, // Waterfall - speed up packet construction
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x10 ) // Waterfall 21w08a 0x10
+            );
+            // Waterfall end
             TO_CLIENT.registerPacket(
                     PlayerListHeaderFooter.class,
                     PlayerListHeaderFooter::new, // Waterfall - speed up packet construction
@@ -238,7 +279,8 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_13, 0x4E ),
                     map( ProtocolConstants.MINECRAFT_1_14, 0x53 ),
                     map( ProtocolConstants.MINECRAFT_1_15, 0x54 ),
-                    map( ProtocolConstants.MINECRAFT_1_16, 0x53 )
+                    map( ProtocolConstants.MINECRAFT_1_16, 0x53 ),
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x5D ) // Waterfall 21w10a 0x53 -> 0x5D
             );
             TO_CLIENT.registerPacket(
                     EntityStatus.class,
@@ -249,7 +291,8 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_14, 0x1B ),
                     map( ProtocolConstants.MINECRAFT_1_15, 0x1C ),
                     map( ProtocolConstants.MINECRAFT_1_16, 0x1B ),
-                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x1A )
+                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x1A ),
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x1B ) // Waterfall 21w10a 0x1A -> 0x1B
             );
             TO_CLIENT.registerPacket(
                     Commands.class,
@@ -257,21 +300,24 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_13, 0x11 ),
                     map( ProtocolConstants.MINECRAFT_1_15, 0x12 ),
                     map( ProtocolConstants.MINECRAFT_1_16, 0x11 ),
-                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x10 )
+                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x10 ),
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x12 ) // Waterfall 21w08a 0x10 -> 0x12
             );
             TO_CLIENT.registerPacket(
                     GameState.class,
                     GameState::new, // Waterfall - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_1_15, 0x1F ),
                     map( ProtocolConstants.MINECRAFT_1_16, 0x1E ),
-                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x1D )
+                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x1D ),
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x1E ) // Waterfall 21w10a 0x1D -> 0x1E
             );
             TO_CLIENT.registerPacket(
                     ViewDistance.class,
                     ViewDistance::new, // Waterfall - speed up packet construction
                     map( ProtocolConstants.MINECRAFT_1_14, 0x41 ),
                     map( ProtocolConstants.MINECRAFT_1_15, 0x42 ),
-                    map( ProtocolConstants.MINECRAFT_1_16, 0x41 )
+                    map( ProtocolConstants.MINECRAFT_1_16, 0x41 ),
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x45 ) // Waterfall 21w10a 0x41 -> 0x45
             );
 
             TO_SERVER.registerPacket(
@@ -283,7 +329,8 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_12_1, 0x0B ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x0E ),
                     map( ProtocolConstants.MINECRAFT_1_14, 0x0F ),
-                    map( ProtocolConstants.MINECRAFT_1_16, 0x10 )
+                    map( ProtocolConstants.MINECRAFT_1_16, 0x10 ),
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x0F ) // Waterfall 21w10a 0x10 -> 0x0F
             );
             TO_SERVER.registerPacket(
                     Chat.class,
@@ -321,7 +368,8 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_12, 0x0A ),
                     map( ProtocolConstants.MINECRAFT_1_12_1, 0x09 ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x0A ),
-                    map( ProtocolConstants.MINECRAFT_1_14, 0x0B )
+                    map( ProtocolConstants.MINECRAFT_1_14, 0x0B ),
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x0A ) // Waterfall 21w10a 0x0B -> 0x0A
             );
         }
     },
@@ -525,7 +573,12 @@ public enum Protocol
             }
         }
 
-        private <P extends DefinedPacket> void registerPacket(Class<P> packetClass, java.util.function.Supplier<P> constructor, ProtocolMapping... mappings) // Waterfall - speed up packet construction
+        private <P extends DefinedPacket> void registerPacket(Class<P> packetClass, java.util.function.Supplier<P> constructor, ProtocolMapping... mappings)
+        {
+            registerPacket(packetClass, constructor, null, mappings);
+        }
+
+        private <P extends DefinedPacket> void registerPacket(Class<P> packetClass, java.util.function.Supplier<P> constructor, Integer removedIn, ProtocolMapping... mappings) // Waterfall - speed up packet construction
         {
             // Waterfall start - speed up packet construction
             /*
@@ -544,6 +597,13 @@ public enum Protocol
                         continue;
                     }
 
+                    if ( removedIn != null && protocol >= removedIn )
+                    {
+                        // This packet has been dropped in this version or higher. No need to continue
+
+                        break;
+                    }
+
                     if ( mapping.protocolVersion < protocol && mappingIndex + 1 < mappings.length )
                     {
                         // Mapping is non current, but the next one may be ok
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/ProtocolConstants.java b/protocol/src/main/java/net/md_5/bungee/protocol/ProtocolConstants.java
index 2202c4d3..aebe6b2c 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/ProtocolConstants.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/ProtocolConstants.java
@@ -33,6 +33,14 @@ public class ProtocolConstants
     public static final int MINECRAFT_1_16_2 = 751;
     public static final int MINECRAFT_1_16_3 = 753;
     public static final int MINECRAFT_1_16_4 = 754;
+    // Waterfall 1.17 & snapshot/pre start:
+    public static final int MINECRAFT_1_17 = 755; // Waterfall 1.17
+
+    private static final int SNAPSHOT_BIT = 30;
+    public static final int SNAPSHOT_PROTOCOL = (1 << SNAPSHOT_BIT) | 25; // Snapshot 21w17a
+
+    // Waterfall 1.17 & snapshot/pre end
+
     public static final List<String> SUPPORTED_VERSIONS = Arrays.asList(
             "1.8.x",
             "1.9.x",
@@ -42,7 +50,8 @@ public class ProtocolConstants
             "1.13.x",
             "1.14.x",
             "1.15.x",
-            "1.16.x"
+            "1.16.x",
+            "1.17" // Waterfall 1.17
     );
     public static final List<Integer> SUPPORTED_VERSION_IDS = Arrays.asList(
             ProtocolConstants.MINECRAFT_1_8,
@@ -71,7 +80,9 @@ public class ProtocolConstants
             ProtocolConstants.MINECRAFT_1_16_1,
             ProtocolConstants.MINECRAFT_1_16_2,
             ProtocolConstants.MINECRAFT_1_16_3,
-            ProtocolConstants.MINECRAFT_1_16_4
+            ProtocolConstants.MINECRAFT_1_16_4,
+            ProtocolConstants.MINECRAFT_1_17, // Waterfall 1.17
+            ProtocolConstants.SNAPSHOT_PROTOCOL // Waterfall snapshot/pre
     );
 
     public static final boolean isBeforeOrEq(int before, int other)
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/ClientSettings.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/ClientSettings.java
index 9daf7a73..0c21e5ed 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/ClientSettings.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/ClientSettings.java
@@ -23,6 +23,7 @@ public class ClientSettings extends DefinedPacket
     private byte difficulty;
     private byte skinParts;
     private int mainHand;
+    private boolean textFiltering; // Waterfall Added in 21w07a
 
     @Override
     public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
@@ -35,6 +36,11 @@ public class ClientSettings extends DefinedPacket
         if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_9 )
         {
             mainHand = DefinedPacket.readVarInt( buf );
+            // Waterfall Added in 21w07a:
+            if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_17)
+            {
+                textFiltering = buf.readBoolean();
+            }
         }
     }
 
@@ -55,6 +61,11 @@ public class ClientSettings extends DefinedPacket
         if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_9 )
         {
             DefinedPacket.writeVarInt( mainHand, buf );
+            // Waterfall Added in 21w07a:
+            if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_17)
+            {
+                buf.writeBoolean( textFiltering );
+            }
         }
     }
 
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Title.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/title/GenericTitle.java
similarity index 85%
rename from protocol/src/main/java/net/md_5/bungee/protocol/packet/Title.java
rename to protocol/src/main/java/net/md_5/bungee/protocol/packet/title/GenericTitle.java
index 6bc1469c..478fd079 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Title.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/title/GenericTitle.java
@@ -1,22 +1,19 @@
-package net.md_5.bungee.protocol.packet;
+package net.md_5.bungee.protocol.packet.title;
 
 import io.netty.buffer.ByteBuf;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
-import net.md_5.bungee.protocol.DefinedPacket;
 import net.md_5.bungee.protocol.ProtocolConstants;
 
 @Data
 @NoArgsConstructor
-@EqualsAndHashCode(callSuper = false)
-public class Title extends DefinedPacket
+@EqualsAndHashCode(callSuper = true)
+public class GenericTitle extends Title
 {
 
-    private Action action;
-
-    // TITLE & SUBTITLE
+    // TITLE, SUBTITLE & ACTIONBAR
     private String text;
 
     // TIMES
@@ -84,14 +81,4 @@ public class Title extends DefinedPacket
         handler.handle( this );
     }
 
-    public static enum Action
-    {
-
-        TITLE,
-        SUBTITLE,
-        ACTIONBAR,
-        TIMES,
-        CLEAR,
-        RESET
-    }
-}
+}
\ No newline at end of file
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/title/Title.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/title/Title.java
new file mode 100644
index 00000000..d3810db7
--- /dev/null
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/title/Title.java
@@ -0,0 +1,88 @@
+package net.md_5.bungee.protocol.packet.title;
+
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.Getter;
+import lombok.NoArgsConstructor;
+import lombok.Setter;
+import net.md_5.bungee.protocol.DefinedPacket;
+import net.md_5.bungee.protocol.ProtocolConstants;
+
+@EqualsAndHashCode(callSuper = false)
+public abstract class Title extends DefinedPacket
+{
+
+    @Getter
+    @Setter
+    protected Action action;
+
+    public static enum Action
+    {
+
+        TITLE,
+        SUBTITLE,
+        ACTIONBAR,
+        TIMES,
+        CLEAR,
+        RESET
+    }
+
+    @NoArgsConstructor
+    @Data
+    public static class Builder
+    {
+        private Action action;
+
+        // TITLE, SUBTITLE & ACTIONBAR
+        private String text;
+
+        // TIMES
+        private int fadeIn;
+        private int stay;
+        private int fadeOut;
+
+        public Title build(int protocolVersion)
+        {
+            if ( protocolVersion <= ProtocolConstants.MINECRAFT_1_17 )
+            {
+                GenericTitle packet = new GenericTitle();
+                packet.setText( text );
+                packet.setFadeIn( fadeIn );
+                packet.setStay( stay );
+                packet.setFadeOut( fadeOut );
+                packet.setAction( action );
+                return packet;
+            } else
+            {
+                switch ( action )
+                {
+                    case TITLE:
+                        TitleText title = new TitleText();
+                        title.setText( text );
+                        return title;
+                    case SUBTITLE:
+                        TitleSubtitle subtitle = new TitleSubtitle();
+                        subtitle.setText( text );
+                        return subtitle;
+                    case ACTIONBAR:
+                        TitleActionBar titleActionBar = new TitleActionBar();
+                        titleActionBar.setText( text );
+                        return titleActionBar;
+                    case TIMES:
+                        TitleTimes titleTimes = new TitleTimes();
+                        titleTimes.setFadeIn( fadeIn );
+                        titleTimes.setStay( stay );
+                        titleTimes.setFadeOut( fadeOut );
+                        return titleTimes;
+                    case RESET:
+                    case CLEAR:
+                        TitleClearAndReset titleClearAndReset = new TitleClearAndReset();
+                        titleClearAndReset.setAction( action );
+                        return titleClearAndReset;
+                    default:
+                        throw new IllegalArgumentException( "Action must be specified" );
+                }
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/title/TitleActionBar.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/title/TitleActionBar.java
new file mode 100644
index 00000000..a1275662
--- /dev/null
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/title/TitleActionBar.java
@@ -0,0 +1,49 @@
+package net.md_5.bungee.protocol.packet.title;
+
+import io.netty.buffer.ByteBuf;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import net.md_5.bungee.protocol.AbstractPacketHandler;
+import net.md_5.bungee.protocol.ProtocolConstants;
+
+@Data
+@EqualsAndHashCode(callSuper = true)
+public class TitleActionBar extends Title
+{
+
+    // TITLE, SUBTITLE & ACTIONBAR
+    private String text;
+
+    public TitleActionBar()
+    {
+        action = Action.ACTIONBAR;
+    }
+
+    @Override
+    public void setAction(Action action)
+    {
+        if ( action != Action.ACTIONBAR )
+        {
+            throw new UnsupportedOperationException( "Packet only supports ACTIONBAR" );
+        }
+    }
+
+    @Override
+    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        text = readString( buf );
+    }
+
+    @Override
+    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        writeString( text, buf );
+    }
+
+    @Override
+    public void handle(AbstractPacketHandler handler) throws Exception
+    {
+        handler.handle( this );
+    }
+
+}
\ No newline at end of file
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/title/TitleClearAndReset.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/title/TitleClearAndReset.java
new file mode 100644
index 00000000..ee1a29ff
--- /dev/null
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/title/TitleClearAndReset.java
@@ -0,0 +1,49 @@
+package net.md_5.bungee.protocol.packet.title;
+
+import io.netty.buffer.ByteBuf;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import net.md_5.bungee.protocol.AbstractPacketHandler;
+import net.md_5.bungee.protocol.ProtocolConstants;
+
+@Data
+@EqualsAndHashCode(callSuper = true)
+public class TitleClearAndReset extends Title
+{
+
+    public TitleClearAndReset()
+    {
+        action = Action.CLEAR;
+    }
+
+    @Override
+    public void setAction(Action action)
+    {
+        if ( action == Action.CLEAR || action == Action.RESET )
+        {
+            this.action = action;
+        } else
+        {
+            throw new UnsupportedOperationException( "Packet only supports CLEAR and RESET" );
+        }
+    }
+
+    @Override
+    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        action = buf.readBoolean() ? Action.RESET : Action.CLEAR;
+    }
+
+    @Override
+    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        buf.writeBoolean( action == Action.RESET );
+    }
+
+    @Override
+    public void handle(AbstractPacketHandler handler) throws Exception
+    {
+        handler.handle( this );
+    }
+
+}
\ No newline at end of file
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/title/TitleSubtitle.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/title/TitleSubtitle.java
new file mode 100644
index 00000000..826ffb37
--- /dev/null
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/title/TitleSubtitle.java
@@ -0,0 +1,49 @@
+package net.md_5.bungee.protocol.packet.title;
+
+import io.netty.buffer.ByteBuf;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import net.md_5.bungee.protocol.AbstractPacketHandler;
+import net.md_5.bungee.protocol.ProtocolConstants;
+
+@Data
+@EqualsAndHashCode(callSuper = true)
+public class TitleSubtitle extends Title
+{
+
+    // TITLE, SUBTITLE & ACTIONBAR
+    private String text;
+
+    public TitleSubtitle()
+    {
+        action = Action.SUBTITLE;
+    }
+
+    @Override
+    public void setAction(Action action)
+    {
+        if ( action != Action.SUBTITLE )
+        {
+            throw new UnsupportedOperationException( "Packet only supports SUBTITLE" );
+        }
+    }
+
+    @Override
+    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        text = readString( buf );
+    }
+
+    @Override
+    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        writeString( text, buf );
+    }
+
+    @Override
+    public void handle(AbstractPacketHandler handler) throws Exception
+    {
+        handler.handle( this );
+    }
+
+}
\ No newline at end of file
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/title/TitleText.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/title/TitleText.java
new file mode 100644
index 00000000..710e3c0a
--- /dev/null
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/title/TitleText.java
@@ -0,0 +1,49 @@
+package net.md_5.bungee.protocol.packet.title;
+
+import io.netty.buffer.ByteBuf;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import net.md_5.bungee.protocol.AbstractPacketHandler;
+import net.md_5.bungee.protocol.ProtocolConstants;
+
+@Data
+@EqualsAndHashCode(callSuper = true)
+public class TitleText extends Title
+{
+
+    // TITLE, SUBTITLE & ACTIONBAR
+    private String text;
+
+    public TitleText()
+    {
+        action = Action.TITLE;
+    }
+
+    @Override
+    public void setAction(Action action)
+    {
+        if ( action != Action.TITLE )
+        {
+            throw new UnsupportedOperationException( "Packet only supports TITLE" );
+        }
+    }
+
+    @Override
+    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        text = readString( buf );
+    }
+
+    @Override
+    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        writeString( text, buf );
+    }
+
+    @Override
+    public void handle(AbstractPacketHandler handler) throws Exception
+    {
+        handler.handle( this );
+    }
+
+}
\ No newline at end of file
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/title/TitleTimes.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/title/TitleTimes.java
new file mode 100644
index 00000000..98da199e
--- /dev/null
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/title/TitleTimes.java
@@ -0,0 +1,55 @@
+package net.md_5.bungee.protocol.packet.title;
+
+import io.netty.buffer.ByteBuf;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import net.md_5.bungee.protocol.AbstractPacketHandler;
+import net.md_5.bungee.protocol.ProtocolConstants;
+
+@Data
+@EqualsAndHashCode(callSuper = true)
+public class TitleTimes extends Title
+{
+
+    // TIMES
+    private int fadeIn;
+    private int stay;
+    private int fadeOut;
+
+    public TitleTimes()
+    {
+        action = Action.TIMES;
+    }
+
+    @Override
+    public void setAction(Action action)
+    {
+        if ( action != Action.TIMES )
+        {
+            throw new UnsupportedOperationException( "Packet only supports TIMES" );
+        }
+    }
+
+    @Override
+    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        fadeIn = buf.readInt();
+        stay = buf.readInt();
+        fadeOut = buf.readInt();
+    }
+
+    @Override
+    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        buf.writeInt( fadeIn );
+        buf.writeInt( stay );
+        buf.writeInt( fadeOut );
+    }
+
+    @Override
+    public void handle(AbstractPacketHandler handler) throws Exception
+    {
+        handler.handle( this );
+    }
+
+}
\ No newline at end of file
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeTitle.java b/proxy/src/main/java/net/md_5/bungee/BungeeTitle.java
index 494213db..11c98ea4 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeTitle.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeTitle.java
@@ -5,16 +5,16 @@ import net.md_5.bungee.api.chat.BaseComponent;
 import net.md_5.bungee.api.connection.ProxiedPlayer;
 import net.md_5.bungee.chat.ComponentSerializer;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.packet.Title.Action;
+import net.md_5.bungee.protocol.packet.title.Title.Action;
 
 public class BungeeTitle implements Title
 {
 
-    private net.md_5.bungee.protocol.packet.Title title, subtitle, times, clear, reset;
+    private net.md_5.bungee.protocol.packet.title.Title.Builder title, subtitle, times, clear, reset;
 
-    private static net.md_5.bungee.protocol.packet.Title createPacket(Action action)
+    private static net.md_5.bungee.protocol.packet.title.Title.Builder createPacket(Action action)
     {
-        net.md_5.bungee.protocol.packet.Title title = new net.md_5.bungee.protocol.packet.Title();
+        net.md_5.bungee.protocol.packet.title.Title.Builder title = new net.md_5.bungee.protocol.packet.title.Title.Builder();
         title.setAction( action );
 
         if ( action == Action.TIMES )
@@ -140,11 +140,11 @@ public class BungeeTitle implements Title
         return this;
     }
 
-    private static void sendPacket(ProxiedPlayer player, DefinedPacket packet)
+    private static void sendPacket(ProxiedPlayer player, net.md_5.bungee.protocol.packet.title.Title.Builder packet)
     {
         if ( packet != null )
         {
-            player.unsafe().sendPacket( packet );
+            player.unsafe().sendPacket( packet.build( player.getPendingConnection().getVersion() ) );
         }
     }
 
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index 7ec119ea..522f0f5f 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -506,10 +506,10 @@ public final class UserConnection implements ProxiedPlayer
                 sendMessage( position, sender, ComponentSerializer.toString( new TextComponent( BaseComponent.toLegacyText( message ) ) ) );
             } else
             {
-                net.md_5.bungee.protocol.packet.Title title = new net.md_5.bungee.protocol.packet.Title();
-                title.setAction( net.md_5.bungee.protocol.packet.Title.Action.ACTIONBAR );
+                net.md_5.bungee.protocol.packet.title.Title.Builder title = new net.md_5.bungee.protocol.packet.title.Title.Builder();
+                title.setAction( net.md_5.bungee.protocol.packet.title.Title.Action.ACTIONBAR );
                 title.setText( ComponentSerializer.toString( message ) );
-                unsafe.sendPacket( title );
+                unsafe.sendPacket( title.build( getPendingConnection().getVersion() ) );
             }
         } else
         {
diff --git a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap.java b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap.java
index db93d883..29ab510f 100644
--- a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap.java
+++ b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap.java
@@ -74,6 +74,11 @@ public abstract class EntityMap
             case ProtocolConstants.MINECRAFT_1_16_3:
             case ProtocolConstants.MINECRAFT_1_16_4:
                 return EntityMap_1_16_2.INSTANCE;
+            // Waterfall snapshot/pre start:
+            case ProtocolConstants.MINECRAFT_1_17:
+            case ProtocolConstants.SNAPSHOT_PROTOCOL:
+                return EntityMap_1_17.INSTANCE;
+            // Waterfall snapshot/pre end:
         }
         throw new RuntimeException( "Version " + version + " has no entity map" );
     }
diff --git a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_17.java b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_17.java
new file mode 100644
index 00000000..873132cf
--- /dev/null
+++ b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_17.java
@@ -0,0 +1,181 @@
+package net.md_5.bungee.entitymap;
+
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+import io.netty.buffer.ByteBuf;
+import java.util.UUID;
+import net.md_5.bungee.BungeeCord;
+import net.md_5.bungee.UserConnection;
+import net.md_5.bungee.api.connection.ProxiedPlayer;
+import net.md_5.bungee.protocol.DefinedPacket;
+import net.md_5.bungee.protocol.ProtocolConstants;
+
+class EntityMap_1_17 extends EntityMap
+{
+
+    static final EntityMap_1_17 INSTANCE = new EntityMap_1_17();
+
+    EntityMap_1_17()
+    {
+        addRewrite( 0x00, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Object : PacketPlayOutSpawnEntity
+        addRewrite( 0x01, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Experience Orb : PacketPlayOutSpawnEntityExperienceOrb
+        addRewrite( 0x02, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Mob : PacketPlayOutSpawnEntityLiving
+        addRewrite( 0x03, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Painting : PacketPlayOutSpawnEntityPainting
+        addRewrite( 0x04, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Player : PacketPlayOutNamedEntitySpawn
+        addRewrite( 0x06, ProtocolConstants.Direction.TO_CLIENT, true ); // Animation : PacketPlayOutAnimation
+        addRewrite( 0x09, ProtocolConstants.Direction.TO_CLIENT, true ); // Block Break Animation : PacketPlayOutBlockBreakAnimation
+        addRewrite( 0x1B, ProtocolConstants.Direction.TO_CLIENT, false ); // Entity Status : PacketPlayOutEntityStatus
+        addRewrite( 0x29, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Relative Move : PacketPlayOutRelEntityMove
+        addRewrite( 0x2A, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look and Relative Move : PacketPlayOutRelEntityMoveLook
+        addRewrite( 0x2B, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look : PacketPlayOutEntityLook
+        addRewrite( 0x34, ProtocolConstants.Direction.TO_CLIENT, true ); // Combat Kill : PlayOutCombatKill
+        addRewrite( 0x39, ProtocolConstants.Direction.TO_CLIENT, true ); // Remove Entity : PacketPlayOutRemoveDestroy
+        addRewrite( 0x3A, ProtocolConstants.Direction.TO_CLIENT, true ); // Remove Entity Effect : PacketPlayOutRemoveEntityEffect
+        addRewrite( 0x3D, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Head Look : PacketPlayOutEntityHeadRotation
+        addRewrite( 0x46, ProtocolConstants.Direction.TO_CLIENT, true ); // Camera : PacketPlayOutCamera
+        addRewrite( 0x4C, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Metadata : PacketPlayOutEntityMetadata
+        addRewrite( 0x4D, ProtocolConstants.Direction.TO_CLIENT, false ); // Attach Entity : PacketPlayOutAttachEntity
+        addRewrite( 0x4E, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Velocity : PacketPlayOutEntityVelocity
+        addRewrite( 0x4F, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Equipment : PacketPlayOutEntityEquipment
+        addRewrite( 0x53, ProtocolConstants.Direction.TO_CLIENT, true ); // Set Passengers : PacketPlayOutMount
+        addRewrite( 0x5F, ProtocolConstants.Direction.TO_CLIENT, true ); // Collect Item : PacketPlayOutCollect
+        addRewrite( 0x60, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Teleport : PacketPlayOutEntityTeleport
+        addRewrite( 0x62, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Properties : PacketPlayOutUpdateAttributes
+        addRewrite( 0x63, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Effect : PacketPlayOutEntityEffect
+
+        addRewrite( 0x0D, ProtocolConstants.Direction.TO_SERVER, true ); // Use Entity : PacketPlayInUseEntity
+        addRewrite( 0x1B, ProtocolConstants.Direction.TO_SERVER, true ); // Entity Action : PacketPlayInEntityAction
+    }
+
+    @Override
+    @SuppressFBWarnings("DLS_DEAD_LOCAL_STORE")
+    public void rewriteClientbound(ByteBuf packet, int oldId, int newId, int protocolVersion)
+    {
+        super.rewriteClientbound( packet, oldId, newId );
+
+        // Special cases
+        int readerIndex = packet.readerIndex();
+        int packetId = DefinedPacket.readVarInt( packet );
+        int packetIdLength = packet.readerIndex() - readerIndex;
+        int jumpIndex = packet.readerIndex();
+        switch ( packetId )
+        {
+            case 0x4D /* Attach Entity : PacketPlayOutAttachEntity */:
+                rewriteInt( packet, oldId, newId, readerIndex + packetIdLength + 4 );
+                break;
+            case 0x5F /* Collect Item : PacketPlayOutCollect */:
+                DefinedPacket.readVarInt( packet );
+                rewriteVarInt( packet, oldId, newId, packet.readerIndex() );
+                break;
+            case 0x53 /* Set Passengers : PacketPlayOutMount */:
+                DefinedPacket.readVarInt( packet );
+                jumpIndex = packet.readerIndex();
+                // Fall through on purpose to int array of IDs
+            case 0x39 /* Remove Entity : PacketPlayOutRemoveDestroy */:
+                int entityId = DefinedPacket.readVarInt( packet );
+                if ( entityId == oldId )
+                {
+                    entityId = newId;
+                } else if ( entityId == newId )
+                {
+                    entityId = oldId;
+                }
+                packet.readerIndex( jumpIndex );
+                packet.writerIndex( jumpIndex );
+                DefinedPacket.writeVarInt( entityId, packet );
+                break;
+            case 0x00 /* Spawn Object : PacketPlayOutSpawnEntity */:
+                DefinedPacket.readVarInt( packet );
+                DefinedPacket.readUUID( packet );
+                int type = DefinedPacket.readVarInt( packet );
+                if ( type == 2 || type == 112 || type == 84 ) // arrow, fishing_bobber or spectral_arrow
+                {
+                    if ( type == 2 || type == 84 ) // arrow or spectral_arrow
+                    {
+                        oldId = oldId + 1;
+                        newId = newId + 1;
+                    }
+
+                    packet.skipBytes( 26 ); // double, double, double, byte, byte
+                    int position = packet.readerIndex();
+                    int readId = packet.readInt();
+                    if ( readId == oldId )
+                    {
+                        packet.setInt( position, newId );
+                    } else if ( readId == newId )
+                    {
+                        packet.setInt( position, oldId );
+                    }
+                }
+                break;
+            case 0x04 /* Spawn Player : PacketPlayOutNamedEntitySpawn */:
+                DefinedPacket.readVarInt( packet ); // Entity ID
+                int idLength = packet.readerIndex() - readerIndex - packetIdLength;
+                UUID uuid = DefinedPacket.readUUID( packet );
+                ProxiedPlayer player;
+                if ( ( player = BungeeCord.getInstance().getPlayerByOfflineUUID( uuid ) ) != null )
+                {
+                    int previous = packet.writerIndex();
+                    packet.readerIndex( readerIndex );
+                    packet.writerIndex( readerIndex + packetIdLength + idLength );
+                    DefinedPacket.writeUUID( player.getUniqueId(), packet );
+                    packet.writerIndex( previous );
+                }
+                break;
+            case 0x34 /* Combat Kill : PlayOutCombatKill */:
+                int position = packet.readerIndex();
+                rewriteVarInt( packet, oldId, newId, packet.readerIndex() );
+                packet.readerIndex( position );
+                DefinedPacket.readVarInt( packet );
+                rewriteInt( packet, oldId, newId, packet.readerIndex() );
+                break;
+            case 0x32 /* Combat End : PlayOutCombatEnd */:
+                DefinedPacket.readVarInt( packet ); // Duration
+                rewriteInt( packet, oldId, newId, packet.readerIndex() ); // Killer ID
+                break;
+            case 0x4C /* EntityMetadata : PacketPlayOutEntityMetadata */:
+                DefinedPacket.readVarInt( packet ); // Entity ID
+                rewriteMetaVarInt( packet, oldId + 1, newId + 1, 8, protocolVersion ); // fishing hook
+                rewriteMetaVarInt( packet, oldId, newId, 9, protocolVersion ); // fireworks (et al)
+                rewriteMetaVarInt( packet, oldId, newId, 17, protocolVersion ); // guardian beam
+                break;
+            case 0x5A /* Entity Sound Effect : PacketPlayOutEntitySound */:
+                DefinedPacket.readVarInt( packet );
+                DefinedPacket.readVarInt( packet );
+                rewriteVarInt( packet, oldId, newId, packet.readerIndex() );
+                break;
+            case 0x05 /* Sculk Vibration : PacketPlayOutSculkVibration */:
+                packet.skipBytes( 8 ); // Position
+                if ( DefinedPacket.readString( packet ).equals( "entity" ) )
+                {
+                    rewriteVarInt( packet, oldId, newId, packet.readerIndex() );
+                }
+                break;
+        }
+        packet.readerIndex( readerIndex );
+    }
+
+    @Override
+    public void rewriteServerbound(ByteBuf packet, int oldId, int newId)
+    {
+        super.rewriteServerbound( packet, oldId, newId );
+        // Special cases
+        int readerIndex = packet.readerIndex();
+        int packetId = DefinedPacket.readVarInt( packet );
+        int packetIdLength = packet.readerIndex() - readerIndex;
+
+        if ( packetId == 0x2C /* Spectate : PacketPlayInSpectate */ && !BungeeCord.getInstance().getConfig().isIpForward() )
+        {
+            UUID uuid = DefinedPacket.readUUID( packet );
+            ProxiedPlayer player;
+            if ( ( player = BungeeCord.getInstance().getPlayer( uuid ) ) != null )
+            {
+                int previous = packet.writerIndex();
+                packet.readerIndex( readerIndex );
+                packet.writerIndex( readerIndex + packetIdLength );
+                DefinedPacket.writeUUID( ( (UserConnection) player ).getPendingConnection().getOfflineId(), packet );
+                packet.writerIndex( previous );
+            }
+        }
+        packet.readerIndex( readerIndex );
+    }
+}
\ No newline at end of file
-- 
2.28.0.windows.1

